/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type L2TransactionRequestTwoBridgesInnerStruct = {
  magicValue: BytesLike;
  l2Contract: string;
  l2Calldata: BytesLike;
  factoryDeps: BytesLike[];
  txDataHash: BytesLike;
};

export type L2TransactionRequestTwoBridgesInnerStructOutput = [
  string,
  string,
  string,
  string[],
  string
] & {
  magicValue: string;
  l2Contract: string;
  l2Calldata: string;
  factoryDeps: string[];
  txDataHash: string;
};

export interface L1SharedBridgeInterface extends utils.Interface {
  functions: {
    "BRIDGE_HUB()": FunctionFragment;
    "ERA_CHAIN_ID()": FunctionFragment;
    "ERA_DIAMOND_PROXY()": FunctionFragment;
    "L1_WETH_TOKEN()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "bridgehubConfirmL2Transaction(uint256,bytes32,bytes32)": FunctionFragment;
    "bridgehubDeposit(uint256,address,uint256,bytes)": FunctionFragment;
    "bridgehubDepositBaseToken(uint256,address,address,uint256)": FunctionFragment;
    "chainBalance(uint256,address)": FunctionFragment;
    "claimFailedDeposit(uint256,address,address,uint256,bytes32,uint256,uint256,uint16,bytes32[])": FunctionFragment;
    "claimFailedDepositLegacyErc20Bridge(address,address,uint256,bytes32,uint256,uint256,uint16,bytes32[])": FunctionFragment;
    "depositHappened(uint256,bytes32)": FunctionFragment;
    "depositLegacyErc20Bridge(address,address,address,uint256,uint256,uint256,address,bool)": FunctionFragment;
    "eraWithdrawETH(uint256,uint256)": FunctionFragment;
    "finalizeWithdrawal(uint256,uint256,uint256,uint16,bytes,bytes32[])": FunctionFragment;
    "finalizeWithdrawalLegacyErc20Bridge(uint256,uint256,uint16,bytes,bytes32[])": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "initializeChainGovernance(uint256,address)": FunctionFragment;
    "isWithdrawalFinalized(uint256,uint256,uint256)": FunctionFragment;
    "l2BridgeAddress(uint256)": FunctionFragment;
    "legacyBridge()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "receiveEth(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFundsFromLegacy(address,address,uint256,uint256)": FunctionFragment;
    "setEraLegacyBridgeLastDepositTime(uint256,uint256)": FunctionFragment;
    "setEraPostDiamondUpgradeFirstBatch(uint256)": FunctionFragment;
    "setEraPostLegacyBridgeUpgradeFirstBatch(uint256)": FunctionFragment;
    "setL1Erc20Bridge(address)": FunctionFragment;
    "transferFundsFromLegacy(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BRIDGE_HUB"
      | "ERA_CHAIN_ID"
      | "ERA_DIAMOND_PROXY"
      | "L1_WETH_TOKEN"
      | "acceptOwnership"
      | "bridgehubConfirmL2Transaction"
      | "bridgehubDeposit"
      | "bridgehubDepositBaseToken"
      | "chainBalance"
      | "claimFailedDeposit"
      | "claimFailedDepositLegacyErc20Bridge"
      | "depositHappened"
      | "depositLegacyErc20Bridge"
      | "eraWithdrawETH"
      | "finalizeWithdrawal"
      | "finalizeWithdrawalLegacyErc20Bridge"
      | "initialize"
      | "initializeChainGovernance"
      | "isWithdrawalFinalized"
      | "l2BridgeAddress"
      | "legacyBridge"
      | "owner"
      | "pause"
      | "paused"
      | "pendingOwner"
      | "receiveEth"
      | "renounceOwnership"
      | "safeTransferFundsFromLegacy"
      | "setEraLegacyBridgeLastDepositTime"
      | "setEraPostDiamondUpgradeFirstBatch"
      | "setEraPostLegacyBridgeUpgradeFirstBatch"
      | "setL1Erc20Bridge"
      | "transferFundsFromLegacy"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BRIDGE_HUB",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERA_CHAIN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERA_DIAMOND_PROXY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "L1_WETH_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridgehubConfirmL2Transaction",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgehubDeposit",
    values: [BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgehubDepositBaseToken",
    values: [BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chainBalance",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFailedDeposit",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFailedDepositLegacyErc20Bridge",
    values: [
      string,
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositHappened",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositLegacyErc20Bridge",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "eraWithdrawETH",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeWithdrawal",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeWithdrawalLegacyErc20Bridge",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initializeChainGovernance",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWithdrawalFinalized",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "l2BridgeAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "legacyBridge",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveEth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFundsFromLegacy",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEraLegacyBridgeLastDepositTime",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEraPostDiamondUpgradeFirstBatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setEraPostLegacyBridgeUpgradeFirstBatch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setL1Erc20Bridge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFundsFromLegacy",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "BRIDGE_HUB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ERA_CHAIN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERA_DIAMOND_PROXY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "L1_WETH_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgehubConfirmL2Transaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgehubDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgehubDepositBaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chainBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFailedDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFailedDepositLegacyErc20Bridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositHappened",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositLegacyErc20Bridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eraWithdrawETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeWithdrawalLegacyErc20Bridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeChainGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWithdrawalFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "l2BridgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "legacyBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "receiveEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFundsFromLegacy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEraLegacyBridgeLastDepositTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEraPostDiamondUpgradeFirstBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEraPostLegacyBridgeUpgradeFirstBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setL1Erc20Bridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFundsFromLegacy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "BridgehubDepositBaseTokenInitiated(uint256,address,address,uint256)": EventFragment;
    "BridgehubDepositFinalized(uint256,bytes32,bytes32)": EventFragment;
    "BridgehubDepositInitiated(uint256,bytes32,address,address,address,uint256)": EventFragment;
    "ClaimedFailedDepositSharedBridge(uint256,address,address,uint256)": EventFragment;
    "EraWithdrawETH(uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "LegacyDepositInitiated(uint256,bytes32,address,address,address,uint256,bool)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WithdrawalFinalizedSharedBridge(uint256,address,address,uint256)": EventFragment;
  };

  getEvent(
    nameOrSignatureOrTopic: "BridgehubDepositBaseTokenInitiated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgehubDepositFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BridgehubDepositInitiated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ClaimedFailedDepositSharedBridge"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EraWithdrawETH"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LegacyDepositInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WithdrawalFinalizedSharedBridge"
  ): EventFragment;
}

export interface BridgehubDepositBaseTokenInitiatedEventObject {
  chainId: BigNumber;
  from: string;
  l1Token: string;
  amount: BigNumber;
}
export type BridgehubDepositBaseTokenInitiatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  BridgehubDepositBaseTokenInitiatedEventObject
>;

export type BridgehubDepositBaseTokenInitiatedEventFilter =
  TypedEventFilter<BridgehubDepositBaseTokenInitiatedEvent>;

export interface BridgehubDepositFinalizedEventObject {
  chainId: BigNumber;
  txDataHash: string;
  l2DepositTxHash: string;
}
export type BridgehubDepositFinalizedEvent = TypedEvent<
  [BigNumber, string, string],
  BridgehubDepositFinalizedEventObject
>;

export type BridgehubDepositFinalizedEventFilter =
  TypedEventFilter<BridgehubDepositFinalizedEvent>;

export interface BridgehubDepositInitiatedEventObject {
  chainId: BigNumber;
  txDataHash: string;
  from: string;
  to: string;
  l1Token: string;
  amount: BigNumber;
}
export type BridgehubDepositInitiatedEvent = TypedEvent<
  [BigNumber, string, string, string, string, BigNumber],
  BridgehubDepositInitiatedEventObject
>;

export type BridgehubDepositInitiatedEventFilter =
  TypedEventFilter<BridgehubDepositInitiatedEvent>;

export interface ClaimedFailedDepositSharedBridgeEventObject {
  chainId: BigNumber;
  to: string;
  l1Token: string;
  amount: BigNumber;
}
export type ClaimedFailedDepositSharedBridgeEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  ClaimedFailedDepositSharedBridgeEventObject
>;

export type ClaimedFailedDepositSharedBridgeEventFilter =
  TypedEventFilter<ClaimedFailedDepositSharedBridgeEvent>;

export interface EraWithdrawETHEventObject {
  chainId: BigNumber;
  amount: BigNumber;
}
export type EraWithdrawETHEvent = TypedEvent<
  [BigNumber, BigNumber],
  EraWithdrawETHEventObject
>;

export type EraWithdrawETHEventFilter = TypedEventFilter<EraWithdrawETHEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LegacyDepositInitiatedEventObject {
  chainId: BigNumber;
  l2DepositTxHash: string;
  from: string;
  to: string;
  l1Token: string;
  amount: BigNumber;
  toMerge: boolean;
}
export type LegacyDepositInitiatedEvent = TypedEvent<
  [BigNumber, string, string, string, string, BigNumber, boolean],
  LegacyDepositInitiatedEventObject
>;

export type LegacyDepositInitiatedEventFilter =
  TypedEventFilter<LegacyDepositInitiatedEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawalFinalizedSharedBridgeEventObject {
  chainId: BigNumber;
  to: string;
  l1Token: string;
  amount: BigNumber;
}
export type WithdrawalFinalizedSharedBridgeEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  WithdrawalFinalizedSharedBridgeEventObject
>;

export type WithdrawalFinalizedSharedBridgeEventFilter =
  TypedEventFilter<WithdrawalFinalizedSharedBridgeEvent>;

export interface L1SharedBridge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: L1SharedBridgeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BRIDGE_HUB(overrides?: CallOverrides): Promise<[string]>;

    ERA_CHAIN_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    ERA_DIAMOND_PROXY(overrides?: CallOverrides): Promise<[string]>;

    L1_WETH_TOKEN(overrides?: CallOverrides): Promise<[string]>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    bridgehubConfirmL2Transaction(
      _chainId: BigNumberish,
      _txDataHash: BytesLike,
      _txHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    bridgehubDeposit(
      _chainId: BigNumberish,
      _prevMsgSender: string,
      _l2Value: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    bridgehubDepositBaseToken(
      _chainId: BigNumberish,
      _prevMsgSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    chainBalance(
      chainId: BigNumberish,
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    claimFailedDeposit(
      _chainId: BigNumberish,
      _depositSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    claimFailedDepositLegacyErc20Bridge(
      _depositSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositHappened(
      chainId: BigNumberish,
      l2DepositTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { depositDataHash: string }>;

    depositLegacyErc20Bridge(
      _prevMsgSender: string,
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxGasLimit: BigNumberish,
      _l2TxGasPerPubdataByte: BigNumberish,
      _refundRecipient: string,
      _toMerge: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    eraWithdrawETH(
      _chainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    finalizeWithdrawal(
      _chainId: BigNumberish,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    finalizeWithdrawalLegacyErc20Bridge(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initialize(
      _owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initializeChainGovernance(
      _chainId: BigNumberish,
      _l2BridgeAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isWithdrawalFinalized(
      chainId: BigNumberish,
      l2BatchNumber: BigNumberish,
      l2ToL1MessageNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isFinalized: boolean }>;

    l2BridgeAddress(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { l2Bridge: string }>;

    legacyBridge(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    receiveEth(
      _chainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    safeTransferFundsFromLegacy(
      _token: string,
      _target: string,
      _targetChainId: BigNumberish,
      _gasPerToken: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setEraLegacyBridgeLastDepositTime(
      _eraLegacyBridgeLastDepositBatch: BigNumberish,
      _eraLegacyBridgeLastDepositTxNumber: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setEraPostDiamondUpgradeFirstBatch(
      _eraPostDiamondUpgradeFirstBatch: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setEraPostLegacyBridgeUpgradeFirstBatch(
      _eraPostLegacyBridgeUpgradeFirstBatch: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setL1Erc20Bridge(
      _legacyBridge: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFundsFromLegacy(
      _token: string,
      _target: string,
      _targetChainId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  BRIDGE_HUB(overrides?: CallOverrides): Promise<string>;

  ERA_CHAIN_ID(overrides?: CallOverrides): Promise<BigNumber>;

  ERA_DIAMOND_PROXY(overrides?: CallOverrides): Promise<string>;

  L1_WETH_TOKEN(overrides?: CallOverrides): Promise<string>;

  acceptOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  bridgehubConfirmL2Transaction(
    _chainId: BigNumberish,
    _txDataHash: BytesLike,
    _txHash: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  bridgehubDeposit(
    _chainId: BigNumberish,
    _prevMsgSender: string,
    _l2Value: BigNumberish,
    _data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  bridgehubDepositBaseToken(
    _chainId: BigNumberish,
    _prevMsgSender: string,
    _l1Token: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  chainBalance(
    chainId: BigNumberish,
    l1Token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimFailedDeposit(
    _chainId: BigNumberish,
    _depositSender: string,
    _l1Token: string,
    _amount: BigNumberish,
    _l2TxHash: BytesLike,
    _l2BatchNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBatch: BigNumberish,
    _merkleProof: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  claimFailedDepositLegacyErc20Bridge(
    _depositSender: string,
    _l1Token: string,
    _amount: BigNumberish,
    _l2TxHash: BytesLike,
    _l2BatchNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBatch: BigNumberish,
    _merkleProof: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositHappened(
    chainId: BigNumberish,
    l2DepositTxHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  depositLegacyErc20Bridge(
    _prevMsgSender: string,
    _l2Receiver: string,
    _l1Token: string,
    _amount: BigNumberish,
    _l2TxGasLimit: BigNumberish,
    _l2TxGasPerPubdataByte: BigNumberish,
    _refundRecipient: string,
    _toMerge: boolean,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  eraWithdrawETH(
    _chainId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  finalizeWithdrawal(
    _chainId: BigNumberish,
    _l2BatchNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBatch: BigNumberish,
    _message: BytesLike,
    _merkleProof: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  finalizeWithdrawalLegacyErc20Bridge(
    _l2BatchNumber: BigNumberish,
    _l2MessageIndex: BigNumberish,
    _l2TxNumberInBatch: BigNumberish,
    _message: BytesLike,
    _merkleProof: BytesLike[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initialize(
    _owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initializeChainGovernance(
    _chainId: BigNumberish,
    _l2BridgeAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isWithdrawalFinalized(
    chainId: BigNumberish,
    l2BatchNumber: BigNumberish,
    l2ToL1MessageNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  l2BridgeAddress(
    chainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  legacyBridge(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  receiveEth(
    _chainId: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  safeTransferFundsFromLegacy(
    _token: string,
    _target: string,
    _targetChainId: BigNumberish,
    _gasPerToken: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setEraLegacyBridgeLastDepositTime(
    _eraLegacyBridgeLastDepositBatch: BigNumberish,
    _eraLegacyBridgeLastDepositTxNumber: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setEraPostDiamondUpgradeFirstBatch(
    _eraPostDiamondUpgradeFirstBatch: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setEraPostLegacyBridgeUpgradeFirstBatch(
    _eraPostLegacyBridgeUpgradeFirstBatch: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setL1Erc20Bridge(
    _legacyBridge: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFundsFromLegacy(
    _token: string,
    _target: string,
    _targetChainId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    BRIDGE_HUB(overrides?: CallOverrides): Promise<string>;

    ERA_CHAIN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    ERA_DIAMOND_PROXY(overrides?: CallOverrides): Promise<string>;

    L1_WETH_TOKEN(overrides?: CallOverrides): Promise<string>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    bridgehubConfirmL2Transaction(
      _chainId: BigNumberish,
      _txDataHash: BytesLike,
      _txHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    bridgehubDeposit(
      _chainId: BigNumberish,
      _prevMsgSender: string,
      _l2Value: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<L2TransactionRequestTwoBridgesInnerStructOutput>;

    bridgehubDepositBaseToken(
      _chainId: BigNumberish,
      _prevMsgSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    chainBalance(
      chainId: BigNumberish,
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimFailedDeposit(
      _chainId: BigNumberish,
      _depositSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimFailedDepositLegacyErc20Bridge(
      _depositSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    depositHappened(
      chainId: BigNumberish,
      l2DepositTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    depositLegacyErc20Bridge(
      _prevMsgSender: string,
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxGasLimit: BigNumberish,
      _l2TxGasPerPubdataByte: BigNumberish,
      _refundRecipient: string,
      _toMerge: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    eraWithdrawETH(
      _chainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeWithdrawal(
      _chainId: BigNumberish,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeWithdrawalLegacyErc20Bridge(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        l1Receiver: string;
        l1Token: string;
        amount: BigNumber;
      }
    >;

    initialize(_owner: string, overrides?: CallOverrides): Promise<void>;

    initializeChainGovernance(
      _chainId: BigNumberish,
      _l2BridgeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isWithdrawalFinalized(
      chainId: BigNumberish,
      l2BatchNumber: BigNumberish,
      l2ToL1MessageNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    l2BridgeAddress(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    legacyBridge(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    receiveEth(
      _chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    safeTransferFundsFromLegacy(
      _token: string,
      _target: string,
      _targetChainId: BigNumberish,
      _gasPerToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEraLegacyBridgeLastDepositTime(
      _eraLegacyBridgeLastDepositBatch: BigNumberish,
      _eraLegacyBridgeLastDepositTxNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEraPostDiamondUpgradeFirstBatch(
      _eraPostDiamondUpgradeFirstBatch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setEraPostLegacyBridgeUpgradeFirstBatch(
      _eraPostLegacyBridgeUpgradeFirstBatch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setL1Erc20Bridge(
      _legacyBridge: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFundsFromLegacy(
      _token: string,
      _target: string,
      _targetChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "BridgehubDepositBaseTokenInitiated(uint256,address,address,uint256)"(
      chainId?: BigNumberish | null,
      from?: string | null,
      l1Token?: null,
      amount?: null
    ): BridgehubDepositBaseTokenInitiatedEventFilter;
    BridgehubDepositBaseTokenInitiated(
      chainId?: BigNumberish | null,
      from?: string | null,
      l1Token?: null,
      amount?: null
    ): BridgehubDepositBaseTokenInitiatedEventFilter;

    "BridgehubDepositFinalized(uint256,bytes32,bytes32)"(
      chainId?: BigNumberish | null,
      txDataHash?: BytesLike | null,
      l2DepositTxHash?: BytesLike | null
    ): BridgehubDepositFinalizedEventFilter;
    BridgehubDepositFinalized(
      chainId?: BigNumberish | null,
      txDataHash?: BytesLike | null,
      l2DepositTxHash?: BytesLike | null
    ): BridgehubDepositFinalizedEventFilter;

    "BridgehubDepositInitiated(uint256,bytes32,address,address,address,uint256)"(
      chainId?: BigNumberish | null,
      txDataHash?: BytesLike | null,
      from?: string | null,
      to?: null,
      l1Token?: null,
      amount?: null
    ): BridgehubDepositInitiatedEventFilter;
    BridgehubDepositInitiated(
      chainId?: BigNumberish | null,
      txDataHash?: BytesLike | null,
      from?: string | null,
      to?: null,
      l1Token?: null,
      amount?: null
    ): BridgehubDepositInitiatedEventFilter;

    "ClaimedFailedDepositSharedBridge(uint256,address,address,uint256)"(
      chainId?: BigNumberish | null,
      to?: string | null,
      l1Token?: string | null,
      amount?: null
    ): ClaimedFailedDepositSharedBridgeEventFilter;
    ClaimedFailedDepositSharedBridge(
      chainId?: BigNumberish | null,
      to?: string | null,
      l1Token?: string | null,
      amount?: null
    ): ClaimedFailedDepositSharedBridgeEventFilter;

    "EraWithdrawETH(uint256,uint256)"(
      chainId?: BigNumberish | null,
      amount?: null
    ): EraWithdrawETHEventFilter;
    EraWithdrawETH(
      chainId?: BigNumberish | null,
      amount?: null
    ): EraWithdrawETHEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LegacyDepositInitiated(uint256,bytes32,address,address,address,uint256,bool)"(
      chainId?: BigNumberish | null,
      l2DepositTxHash?: BytesLike | null,
      from?: string | null,
      to?: null,
      l1Token?: null,
      amount?: null,
      toMerge?: null
    ): LegacyDepositInitiatedEventFilter;
    LegacyDepositInitiated(
      chainId?: BigNumberish | null,
      l2DepositTxHash?: BytesLike | null,
      from?: string | null,
      to?: null,
      l1Token?: null,
      amount?: null,
      toMerge?: null
    ): LegacyDepositInitiatedEventFilter;

    "OwnershipTransferStarted(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "WithdrawalFinalizedSharedBridge(uint256,address,address,uint256)"(
      chainId?: BigNumberish | null,
      to?: string | null,
      l1Token?: string | null,
      amount?: null
    ): WithdrawalFinalizedSharedBridgeEventFilter;
    WithdrawalFinalizedSharedBridge(
      chainId?: BigNumberish | null,
      to?: string | null,
      l1Token?: string | null,
      amount?: null
    ): WithdrawalFinalizedSharedBridgeEventFilter;
  };

  estimateGas: {
    BRIDGE_HUB(overrides?: CallOverrides): Promise<BigNumber>;

    ERA_CHAIN_ID(overrides?: CallOverrides): Promise<BigNumber>;

    ERA_DIAMOND_PROXY(overrides?: CallOverrides): Promise<BigNumber>;

    L1_WETH_TOKEN(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    bridgehubConfirmL2Transaction(
      _chainId: BigNumberish,
      _txDataHash: BytesLike,
      _txHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    bridgehubDeposit(
      _chainId: BigNumberish,
      _prevMsgSender: string,
      _l2Value: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    bridgehubDepositBaseToken(
      _chainId: BigNumberish,
      _prevMsgSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    chainBalance(
      chainId: BigNumberish,
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimFailedDeposit(
      _chainId: BigNumberish,
      _depositSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    claimFailedDepositLegacyErc20Bridge(
      _depositSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositHappened(
      chainId: BigNumberish,
      l2DepositTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositLegacyErc20Bridge(
      _prevMsgSender: string,
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxGasLimit: BigNumberish,
      _l2TxGasPerPubdataByte: BigNumberish,
      _refundRecipient: string,
      _toMerge: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    eraWithdrawETH(
      _chainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    finalizeWithdrawal(
      _chainId: BigNumberish,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    finalizeWithdrawalLegacyErc20Bridge(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initialize(
      _owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initializeChainGovernance(
      _chainId: BigNumberish,
      _l2BridgeAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isWithdrawalFinalized(
      chainId: BigNumberish,
      l2BatchNumber: BigNumberish,
      l2ToL1MessageNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    l2BridgeAddress(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    legacyBridge(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    receiveEth(
      _chainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    safeTransferFundsFromLegacy(
      _token: string,
      _target: string,
      _targetChainId: BigNumberish,
      _gasPerToken: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setEraLegacyBridgeLastDepositTime(
      _eraLegacyBridgeLastDepositBatch: BigNumberish,
      _eraLegacyBridgeLastDepositTxNumber: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setEraPostDiamondUpgradeFirstBatch(
      _eraPostDiamondUpgradeFirstBatch: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setEraPostLegacyBridgeUpgradeFirstBatch(
      _eraPostLegacyBridgeUpgradeFirstBatch: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setL1Erc20Bridge(
      _legacyBridge: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFundsFromLegacy(
      _token: string,
      _target: string,
      _targetChainId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    BRIDGE_HUB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ERA_CHAIN_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ERA_DIAMOND_PROXY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    L1_WETH_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    bridgehubConfirmL2Transaction(
      _chainId: BigNumberish,
      _txDataHash: BytesLike,
      _txHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    bridgehubDeposit(
      _chainId: BigNumberish,
      _prevMsgSender: string,
      _l2Value: BigNumberish,
      _data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    bridgehubDepositBaseToken(
      _chainId: BigNumberish,
      _prevMsgSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    chainBalance(
      chainId: BigNumberish,
      l1Token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimFailedDeposit(
      _chainId: BigNumberish,
      _depositSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    claimFailedDepositLegacyErc20Bridge(
      _depositSender: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxHash: BytesLike,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositHappened(
      chainId: BigNumberish,
      l2DepositTxHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositLegacyErc20Bridge(
      _prevMsgSender: string,
      _l2Receiver: string,
      _l1Token: string,
      _amount: BigNumberish,
      _l2TxGasLimit: BigNumberish,
      _l2TxGasPerPubdataByte: BigNumberish,
      _refundRecipient: string,
      _toMerge: boolean,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    eraWithdrawETH(
      _chainId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    finalizeWithdrawal(
      _chainId: BigNumberish,
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    finalizeWithdrawalLegacyErc20Bridge(
      _l2BatchNumber: BigNumberish,
      _l2MessageIndex: BigNumberish,
      _l2TxNumberInBatch: BigNumberish,
      _message: BytesLike,
      _merkleProof: BytesLike[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initializeChainGovernance(
      _chainId: BigNumberish,
      _l2BridgeAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isWithdrawalFinalized(
      chainId: BigNumberish,
      l2BatchNumber: BigNumberish,
      l2ToL1MessageNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    l2BridgeAddress(
      chainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    legacyBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiveEth(
      _chainId: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    safeTransferFundsFromLegacy(
      _token: string,
      _target: string,
      _targetChainId: BigNumberish,
      _gasPerToken: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setEraLegacyBridgeLastDepositTime(
      _eraLegacyBridgeLastDepositBatch: BigNumberish,
      _eraLegacyBridgeLastDepositTxNumber: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setEraPostDiamondUpgradeFirstBatch(
      _eraPostDiamondUpgradeFirstBatch: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setEraPostLegacyBridgeUpgradeFirstBatch(
      _eraPostLegacyBridgeUpgradeFirstBatch: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setL1Erc20Bridge(
      _legacyBridge: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFundsFromLegacy(
      _token: string,
      _target: string,
      _targetChainId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
